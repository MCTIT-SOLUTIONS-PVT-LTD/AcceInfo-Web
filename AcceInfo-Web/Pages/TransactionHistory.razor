@page "/transaction-history"
@using Blazored.LocalStorage
@using System.Text.Json
@using System.Text
@layout MainLayout
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IJSRuntime JS

<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css" />

<div class="row">
    <SideNavSlider />

    <div class="col-lg-9">
        <div class="card shadow-sm">
            <div class="card-body">

                <div class="row">
                    <div class="col-md-12">
                        <div class="ribbon-1">
                            <div class="ribbon-box">
                                <h3><div class="ribbon ribbon-mark bg-primary">Transaction History</div></h3>

                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="row mb-4">
                                            <div class="col-md-3">
                                                <label>Select Account</label>
                                                <select class="form-control" @bind="SelectedAccountId">
                                                    <option value="">-- Select Account --</option>
                                                    @foreach (var acc in Accounts)
                                                    {
                                                        <option value="@acc.AccountId">@acc.AccountName - @acc.AccountCategoryName - @acc.AccountNumber</option>
                                                    }
                                                </select>
                                            </div>

                                            <div class="col-md-3">
                                                <label>From</label>
                                                <InputDate class="form-control" @bind-Value="FromDate" />
                                            </div>

                                            <div class="col-md-3">
                                                <label>To</label>
                                                <InputDate class="form-control" @bind-Value="ToDate" />
                                            </div>

                                            <div class="col-md-3">
                                                <button class="btn btn-dark w-100" style="margin-top: 12%;" @onclick="SearchHistory" disabled="@string.IsNullOrEmpty(SelectedAccountId)">
                                                    Search
                                                </button>
                                            </div>
                                        </div>

                                        @if (IsLoading)
                                        {
                                            <div class="text-center">
                                                <div class="spinner-border text-primary" role="status">
                                                    <span class="sr-only">Loading...</span>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <table class="table" id="historyTable">
                                                <thead>
                                                    <tr>
                                                        <th>Date</th>
                                                        <th>TransactionNumber</th>
                                                        <th>Recipient</th>
                                                        <th>TransactionType</th>
                                                        <th>Amount</th>
                                                        <th>Status</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @if (Transactions != null && Transactions.Count > 0)
                                                    {
                                                        foreach (var tx in Transactions)
                                                        {
                                                            <tr>
                                                                <td>@tx.CreatedOn.ToString("MMM dd, yyyy")</td>
                                                                <td>@tx.TransactionNumber</td>
                                                                <td>
                                                                    @(SelectedAccountId == tx.TransactionFrom
                                                                        ? $"{tx.TransactionToCustomerName} ({tx.ToAccountNumber})"
                                                                        : $"{tx.TransactionFromCustomerName} ({tx.FromAccountNumber})")
                                                                </td>
                                                                <td>@tx.TransactionType</td>
                                                                <td style="color:@(tx.IsCredit ? "green" : "red")">
                                                                    @(tx.IsCredit ? $"+${tx.Amount:0.00}" : $"-${tx.Amount:0.00}")
                                                                </td>
                                                                <td>Success</td>
                                                            </tr>
                                                        }
                                                    }
                                                </tbody>
                                            </table>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
            </div>
        </div>
    </div>
</div>

<!-- Scripts -->
<link href="/assets/css/jquery.dataTables.min.css" rel="stylesheet" type="text/css" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>


<script>
    window.clearDataTable = () => {
        if ($.fn.DataTable.isDataTable('#historyTable')) {
            $('#historyTable').DataTable().clear().destroy();
        }
    };

    window.initializeDataTable = () => {
        $('#historyTable').DataTable();
    };
</script>

@code {
    private DateTime FromDate = DateTime.Today.AddDays(-30);
    private DateTime ToDate = DateTime.Today;
    private bool IsLoading = false;
    private string SelectedAccountId;
    private string UserToken;
    private string ContactId;

    private List<TransactionModel> Transactions = new();
    private List<AccountModel> Accounts = new();

    protected override async Task OnInitializedAsync()
    {
        UserToken = await LocalStorage.GetItemAsync<string>("auth_token");
        ContactId = await LocalStorage.GetItemAsync<string>("user_contactId") ?? string.Empty;
        await LoadCustomerAccounts();
    }

    private async Task LoadCustomerAccounts()
    {
        IsLoading = true;
        StateHasChanged();
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get,
                $"https://acceinfoapi-cga0hmcdazb5hjbs.eastus2-01.azurewebsites.net/api/accounts/cust-account?ContactId={ContactId}");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", UserToken);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var baseResponse = JsonSerializer.Deserialize<ApiResponse<List<AccountModel>>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (baseResponse?.Status == "Success" && baseResponse.Data != null)
                {
                    Accounts = baseResponse.Data;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading accounts: " + ex.Message);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchHistory()
    {
        if (string.IsNullOrEmpty(SelectedAccountId))
            return;

        IsLoading = true;
        StateHasChanged();

        try
        {
            // 🛠 Prepare correct payload
            var requestBody = new
            {
                AccountId = SelectedAccountId,
                StartDate = FromDate.ToString("yyyy-MM-dd"),
                EndDate = ToDate.ToString("yyyy-MM-dd")
            };

            var requestJson = new StringContent(JsonSerializer.Serialize(requestBody), Encoding.UTF8, "application/json");

            var request = new HttpRequestMessage(HttpMethod.Post,
                "https://acceinfoapi-cga0hmcdazb5hjbs.eastus2-01.azurewebsites.net/api/accounts/transaction-history");

            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", UserToken);
            request.Content = requestJson;

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<ApiResponse<List<TransactionModel>>>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                if (result != null && result.Status == "Success" && result.Data != null)
                {
                    Transactions = result.Data;
                    await JS.InvokeVoidAsync("clearDataTable");
                    await JS.InvokeVoidAsync("initializeDataTable");
                }
                else
                {
                    Transactions = [];
                    await JS.InvokeVoidAsync("clearDataTable");
                    await JS.InvokeVoidAsync("initializeDataTable");
                }

                IsLoading = false;
                StateHasChanged();
                
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error Response: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading transactions: " + ex.Message);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private string MaskAccountNumber(string accountNumber)
    {
        if (string.IsNullOrEmpty(accountNumber) || accountNumber.Length < 4)
            return accountNumber;

        var last4 = accountNumber.Substring(accountNumber.Length - 4);
        return $"XXXXXXXXX-{last4}";
    }

    public class TransactionModel
    {
        public string TransactionId { get; set; }
        public string TransactionFrom { get; set; }
        public string TransactionTo { get; set; }
        public DateTime CreatedOn { get; set; }
        public decimal Amount { get; set; }
        public string Note { get; set; }
        public bool IsSelfTransfer { get; set; }
        public string FromAccountNumber { get; set; }
        public string ToAccountNumber { get; set; }
        public string TransactionFromCustomerName { get; set; }
        public string TransactionToCustomerName { get; set; }
        public bool IsCredit { get; set; }
        public string FromAccountType { get; set; }
        public string ToAccountType { get; set; }
        public string TransactionType { get; set; }
        public string TransactionNumber { get; set; }
        
        
    }

    public class AccountModel
    {
        public string AccountId { get; set; }
        public string AccountNumber { get; set; }
        public string AccountCategoryName { get; set; }
        public string AccountCategoryId { get; set; }
        public string AccountName { get; set; }
        public decimal Balance { get; set; }
    }

    public class ApiResponse<T>
    {
        public string Status { get; set; }
        public T Data { get; set; }
        public string Message { get; set; }
        public int StatusCode { get; set; }
    }
}
