@page "/login"
@using System.Text.Json
@using System.Text
@using Common.Models.Response
@using Blazored.LocalStorage
@layout LoginLayout
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JS
@inject ILocalStorageService LocalStorage

<style>
    .otp-container {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 10px;
    }

    .otp-input {
        width: 40px;
        height: 50px;
        font-size: 24px;
        text-align: center;
        border: 2px solid #ddd;
        border-radius: 5px;
    }

    .otp-input:focus {
        border-color: #007bff;
        outline: none;
    }

    .spinner-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }
</style>

<!-- Loader -->
@if (IsLoading)
{
    <div class="spinner-overlay">
        <div class="spinner-border" style="color: #004D6E; width: 3rem; height: 3rem;" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}

<!-- Toast for error messages -->
<div aria-live="polite" aria-atomic="true" style="position: fixed; top: 1rem; right: 1rem; z-index: 9999;">
    <div id="customToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-delay="3000" data-autohide="true">
        <div class="toast-header bg-danger text-white">
            <strong class="mr-auto">Error</strong>
            <button type="button" class="ml-2 mb-1 close text-white" data-dismiss="toast" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="toast-body" id="toastMessage">Something went wrong.</div>
        <div class="progress" style="height: 4px;">
            <div id="toastProgress" class="progress-bar bg-danger" role="progressbar" style="width: 100%; transition: width 3s linear;"></div>
        </div>
    </div>
</div>

<div class="row vh-100">

    <!-- Login Form -->
    <div class="col-lg-4 pr-0" style="@(ShowOtpSection ? "display:none;" : "")">
        <div class="card mb-0 shadow-none">
            <div class="card-body">
                <div class="px-3" style="margin-top:30%;">
                    <div class="media">
                        <div class="media-body ml-3 align-self-center">
                            <img src="assets/images/logo-dark.png" height="35" alt="logo" class="my-3">
                            <p class="text-muted mb-0">Sign in to continue to ACCEINFO.</p>
                        </div>
                    </div>
                    <form class="form-horizontal my-4" onsubmit="return false;">
                        <div class="form-group">
                            <label for="username">Client Card or Username</label>
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="basic-addon1"><i class="mdi mdi-account-outline font-16"></i></span>
                                </div>
                                <input type="text"
                                       class="form-control @(ShowUsernameError ? "is-invalid" : "")"
                                       id="username"
                                       placeholder="Enter username"
                                       @bind="Username"
                                       @oninput="OnUsernameInput" />
                            </div>
                            @if (ShowUsernameError)
                            {
                                <div class="text-danger">Username is required.</div>
                            }
                        </div>

                        <div class="form-group">
                            <label for="userpassword">Password</label>
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="basic-addon2"><i class="mdi mdi-key font-16"></i></span>
                                </div>

                                <input type="@PasswordInputType"
                                       class="form-control @(ShowPasswordError ? "is-invalid" : "")"
                                       id="userpassword"
                                       placeholder="Enter password"
                                       @bind="Password"
                                       @oninput="OnPasswordInput" />

                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                        <i class="mdi @(IsPasswordVisible ? "mdi-eye-off" : "mdi-eye")"></i>
                                    </button>
                                </div>
                            </div>

                            @if (ShowPasswordError)
                            {
                                <div class="text-danger">Password is required.</div>
                            }
                        </div>

                        <div class="form-group row mt-4">
                            <div class="col-sm-6">
                                <div class="custom-control custom-checkbox">
                                    <input type="checkbox"
                                           class="custom-control-input"
                                           id="customControlInline"
                                           @bind="RememberUsername" />
                                    <label class="custom-control-label" for="customControlInline">
                                        Save client card or username
                                    </label>
                                </div>
                            </div>
                            <div class="col-sm-6 text-right">
                                <a href="#" class="text-muted font-13">
                                    <i class="mdi mdi-lock"></i> Forgot your password?
                                </a>
                            </div>
                        </div>

                        <div class="form-group mb-0 row">
                            <div class="col-12 mt-2">
                                <button class="btn btn-primary btn-block waves-effect waves-light" type="submit" @onclick="HandleLogin">
                                    Sign In <i class="fas fa-sign-in-alt ml-1"></i>
                                </button>
                                @if (!string.IsNullOrWhiteSpace(LoginApiErrorMessage))
                                {
                                    <div class="text-danger api-error mb-2">@LoginApiErrorMessage</div>
                                }
                            </div>

                            
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- OTP Form -->
    <div class="col-lg-4 pr-0" style="@(ShowOtpSection ? "" : "display:none;")">
        <div class="card mb-0 shadow-none">
            <div class="card-body">

                <div class="px-3" style="margin-top:30%;">
                    <div class="media">
                        <a href="/login" class="logo logo-admin"><img src="assets/images/logo-dark-sm.png" height="55" alt="logo" class="my-3"></a>
                        <div class="media-body ml-3 align-self-center">
                            <h4 class="mt-0 mb-1" id="title-page">ACCE Token</h4>
                            <p class="text-muted mb-0">If you use the Entrust IdentityGuard Mobile app, you can copy and paste the token number into the RBC Caribbean app.</p>
                        </div>
                    </div>

                    <br />
                    <br />

                    <div id="otpSection" style="text-align: center;">
                        <!-- <h4 class="text-center mt-3">Enter OTP</h4> -->
                        <label for="username">Please enter the value from your Secure Token</label>
                        <div class="otp-container">
                            <input type="text" class="otp-input" maxlength="1" id="otp1" onkeyup="moveToNext(this, 'otp2')" />
                            <input type="text" class="otp-input" maxlength="1" id="otp2" onkeyup="moveToNext(this, 'otp3')" />
                            <input type="text" class="otp-input" maxlength="1" id="otp3" onkeyup="moveToNext(this, 'otp4')" />
                            <input type="text" class="otp-input" maxlength="1" id="otp4" onkeyup="moveToNext(this, 'otp5')" />
                            <input type="text" class="otp-input" maxlength="1" id="otp5" onkeyup="moveToNext(this, 'otp6')" />
                            <input type="text" class="otp-input" maxlength="1" id="otp6" onkeyup="moveToNext(this, '')" />
                        </div>
                        <button class="btn btn-primary btn-block waves-effect waves-light mt-5" type="button" @onclick="HandleOtpSubmit">Continue</button>

                        @if (!string.IsNullOrWhiteSpace(OtpApiErrorMessage))
                        {
                            <div class="text-danger api-error mt-3">@OtpApiErrorMessage</div>
                        }
                    </div>
                </div>

                <div class="m-3 text-center bg-light p-3 text-primary">
                    <h5 class="">Remember It?</h5>
                    <p class="font-13">Sign In ACCE Now</p>
                    <a href="/login" class="btn btn-primary btn-round waves-effect waves-light">Sign In here</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Right Panel -->
    <div class="col-lg-8 p-0 d-flex justify-content-center">
        <div class="accountbg d-flex align-items-center">
            <div class="account-title text-white text-center">
                <!-- <img src="assets/images/logo-dark.png" alt="" class="logo-lg"> -->
                <h2 class="mt-3">Welcome to Acce<span style="color: #df1a22;">Info</span></h2>
                <div class="border w-25 mx-auto border-primary"></div>
                <h1 class="">Let's Get Started</h1>
                <p class="font-14 mt-3">Don't have an account ? <a href="" style="color: #df1a22;">Sign up</a></p>

            </div>
        </div>
    </div>
</div>

<!-- JS Functions for Toast and OTP -->
<script>
    function moveToNext(current, nextFieldId) {
        if (current.value.length === 1 && nextFieldId) {
            document.getElementById(nextFieldId)?.focus();
        }
    }

    window.getOtpValue = function () {
        const otp = [...Array(6).keys()]
            .map(i => document.getElementById("otp" + (i + 1))?.value || "")
            .join("");
        console.log("OTP from JS:", otp);
        return otp;
    };

    window.showToast = function (message) {
        $('#toastMessage').text(message);
        $('#toastProgress').css({ width: '100%', transition: 'none' });
        $('#customToast').toast('show');
        setTimeout(function () {
            $('#toastProgress').css({ width: '0%', transition: 'width 3s linear' });
        }, 10);
    };

    document.querySelectorAll('.otp-input').forEach(input => {
        input.addEventListener('input', () => {
            const apiError = document.querySelector('.api-error');
            if (apiError) apiError.innerText = '';
        });
    });
</script>

@code {
    private string Username;
    private string Password;
    private string LoginApiErrorMessage;
    private bool RememberUsername = false;
    private bool ShowUsernameError = false;
    private bool ShowPasswordError = false;
    private bool ShowOtpSection = false;
    private bool IsLoading = false;
    private string OtpApiErrorMessage = string.Empty;

    private bool IsPasswordVisible { get; set; } = false;

    private string PasswordInputType => IsPasswordVisible ? "text" : "password";

    private void TogglePasswordVisibility()
    {
        IsPasswordVisible = !IsPasswordVisible;
    }
    

    private void OnUsernameInput(ChangeEventArgs e)
    {
        Username = e.Value?.ToString();
        ShowUsernameError = string.IsNullOrWhiteSpace(Username);

        // Clear API error as user types
        if (!string.IsNullOrWhiteSpace(LoginApiErrorMessage))
            LoginApiErrorMessage = string.Empty;
    }

    private void OnPasswordInput(ChangeEventArgs e)
    {
        Password = e.Value?.ToString();
        ShowPasswordError = string.IsNullOrWhiteSpace(Password);

        // Clear API error as user types
        if (!string.IsNullOrWhiteSpace(LoginApiErrorMessage))
            LoginApiErrorMessage = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("auth_token");
        if (!string.IsNullOrWhiteSpace(token))
        {
            NavigationManager.NavigateTo("/", true);
        }

        if (await LocalStorage.ContainKeyAsync("saved_username"))
        {
            Username = await LocalStorage.GetItemAsync<string>("saved_username");
            RememberUsername = true;
        }
    }

    private async Task HandleLogin()
    {
        ShowUsernameError = string.IsNullOrWhiteSpace(Username);
        ShowPasswordError = string.IsNullOrWhiteSpace(Password);
        LoginApiErrorMessage = string.Empty;

        if (ShowUsernameError || ShowPasswordError)
            return;

        IsLoading = true;
        StateHasChanged();

        try
        {
            var payload = new
            {
                username = Username,
                password = Password,
                type = "customer",
                RefreshToken = ""
            };

            var content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, "application/json");
            var response = await Http.PostAsync("https://acceinfoapi-cga0hmcdazb5hjbs.eastus2-01.azurewebsites.net/api/auth/login", content);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<LoginResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (string.IsNullOrWhiteSpace(result?.Token))
                {
                    LoginApiErrorMessage = "Login failed: token not received.";
                    return;
                }

                await LocalStorage.SetItemAsync("temp_auth_token", result.Token);

                if (RememberUsername)
                    await LocalStorage.SetItemAsync("saved_username", Username);
                else
                    await LocalStorage.RemoveItemAsync("saved_username");

                ShowOtpSection = true;
            }
            else
            {
                LoginApiErrorMessage = "Login failed: " + response.StatusCode;
            }
        }
        catch (Exception ex)
        {
            LoginApiErrorMessage = "Login error: " + ex.Message;
        }

        IsLoading = false;
    }

    private async Task HandleOtpSubmit()
    {
        IsLoading = true;
        OtpApiErrorMessage = string.Empty;
        StateHasChanged();

        var otp = await JS.InvokeAsync<string>("getOtpValue");

        if (string.IsNullOrWhiteSpace(otp) || otp.Length != 6)
        {
            OtpApiErrorMessage = "Please enter a valid 6-digit OTP.";
            IsLoading = false;
            return;
        }

        try
        {
            var token = await LocalStorage.GetItemAsync<string>("temp_auth_token");

            var payload = new { otp = otp };
            var request = new HttpRequestMessage(HttpMethod.Post, "https://acceinfoapi-cga0hmcdazb5hjbs.eastus2-01.azurewebsites.net/api/auth/otp-verify")
                {
                    Content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, "application/json")
                };
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);
            var responseContent = await response.Content.ReadAsStringAsync();
            var result = JsonSerializer.Deserialize<LoginResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            if (response.IsSuccessStatusCode && result.Status?.ToLower() == "success")
            {
                await LocalStorage.SetItemAsync("auth_token", result.Token);
                await LocalStorage.SetItemAsync("user_name", result.Name);
                await LocalStorage.SetItemAsync("user_firstName", result.FirstName);
                await LocalStorage.SetItemAsync("user_lastName", result.LastName);
                await LocalStorage.SetItemAsync("user_contactId", result.ContactId);
                
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                var errorMessage = !string.IsNullOrWhiteSpace(result.Message) ? result.Message : "OTP verification failed.";
                OtpApiErrorMessage = errorMessage;
            }
        }
        catch (Exception ex)
        {
            OtpApiErrorMessage = "OTP verification error: " + ex.Message;
        }

        IsLoading = false;
    }
}
