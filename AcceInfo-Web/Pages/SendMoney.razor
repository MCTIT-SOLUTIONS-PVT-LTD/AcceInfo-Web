@page "/send-money"
@layout MainLayout
@inject NavigationManager NavigationManager
@inject HttpClient Http

@using System.ComponentModel.DataAnnotations

@if (IsLoading)
{
    <div class="spinner-overlay">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}

<div class="row">
    <SideNavSlider />
    <div class="col-lg-9">
        <div class="card">
            <div class="card-body">
                <div class="ribbon-1">
                    <div class="ribbon-box">
                        <h3><div class="ribbon ribbon-mark bg-primary">Send Money</div></h3>

                        @if (ShowConfirmation)
                        {
                            <div class="card border mt-4">
                                <div class="card-body">
                                    <h5 class="text-primary font-weight-bold">Transfer Summary</h5>
                                    <dl class="row">
                                        <dt class="col-sm-5">Transfer From</dt>
                                        <dd class="col-sm-7">@Form.TransferFrom</dd>

                                        <dt class="col-sm-5">Send To</dt>
                                        <dd class="col-sm-7">@Form.TransferTo</dd>

                                        <dt class="col-sm-5">Amount</dt>
                                        <dd class="col-sm-7">@($"{Form.Amount:C2}")</dd>

                                        <dt class="col-sm-5">Currency</dt>
                                        <dd class="col-sm-7">@Form.Currency</dd>

                                        <dt class="col-sm-5">Message</dt>
                                        <dd class="col-sm-7">@Form.Message</dd>
                                    </dl>

                                    <div class="row mt-4">
                                        <div class="col-md-6 mb-2">
                                            <button class="btn btn-primary w-100" @onclick="SubmitTransfer">Confirm Transfer</button>
                                        </div>
                                        <div class="col-md-6 mb-2">
                                            <button class="btn btn-outline-primary w-100" @onclick="() => ShowConfirmation = false">Edit</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else if (ShowSuccess)
                        {
                            <div class="card border-success shadow-sm mt-4">
                                <div class="card-body text-center text-success">
                                    <i class="fas fa-check-circle fa-2x mb-2"></i>
                                    <h5 class="font-weight-bold">Transfer Successful!</h5>
                                    <p><strong>Transaction ID:</strong> @TransactionId</p>
                                    <p class="mb-1">Transfer From: <strong>@Form.TransferFrom</strong></p>
                                    <p class="mb-1">To: <strong>@Form.TransferTo</strong></p>
                                    <p class="mb-1">Amount: <strong>@Form.Amount @Form.Currency</strong></p>
                                    <p class="mb-3">Message: <em>@Form.Message</em></p>
                                    <button class="btn btn-primary" @onclick="() => NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true)">Finish</button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <EditForm Model="Form" OnValidSubmit="ValidateAndShowSummary">
                                <DataAnnotationsValidator />
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label>Transfer from</label>
                                            <InputText class="form-control" @bind-Value="Form.TransferFrom" />
                                            <ValidationMessage For="@(() => Form.TransferFrom)" class="text-danger" />
                                        </div>
                                    </div>

                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label>Send To</label>
                                            <InputText class="form-control" @bind-Value="Form.TransferTo" />
                                            <ValidationMessage For="@(() => Form.TransferTo)" class="text-danger" />
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label>Amount</label>
                                            <InputNumber class="form-control" @bind-Value="Form.Amount" />
                                            <ValidationMessage For="@(() => Form.Amount)" class="text-danger" />
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label>Currency</label>
                                            <select class="form-control" @bind="Form.Currency">
                                                <option value="CAD">CAD</option>
                                                <option value="USD">USD</option>
                                            </select>
                                        </div>
                                    </div>

                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label>Message</label>
                                            <InputText class="form-control" @bind-Value="Form.Message" />
                                        </div>
                                    </div>
                                </div>

                                <div class="row justify-content-end">
                                    <div class="col-md-3">
                                        <button type="reset" class="btn btn-outline-primary w-100" @onclick="ClearForm">Clear</button>
                                    </div>
                                    <div class="col-md-3">
                                        <button type="submit" class="btn btn-primary w-100">Continue</button>
                                    </div>
                                </div>
                            </EditForm>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool ShowConfirmation = false;
    private bool ShowSuccess = false;
    private bool IsLoading = false;
    private string TransactionId = "";

    private SendMoneyForm Form = new();

    public class SendMoneyForm
    {
        [Required(ErrorMessage = "Transfer from is required")]
        public string TransferFrom { get; set; }

        [Required(ErrorMessage = "Recipient is required")]
        public string TransferTo { get; set; }

        [Required(ErrorMessage = "Amount is required"), Range(0.01, double.MaxValue, ErrorMessage = "Enter valid amount")]
        public decimal? Amount { get; set; }

        [Required]
        public string Currency { get; set; } = "CAD";

        public string Message { get; set; }
    }

    private void ValidateAndShowSummary()
    {
        ShowConfirmation = true;
    }

    private async Task SubmitTransfer()
    {
        IsLoading = true;
        StateHasChanged();

        await Task.Delay(3000); // simulate processing

        TransactionId = $"TRX-{DateTime.Now:yyyyMMddHHmmss}";
        ShowSuccess = true;
        ShowConfirmation = false;
        IsLoading = false;

        StateHasChanged();
    }

    private void ClearForm()
    {
        Form = new SendMoneyForm();
        ShowConfirmation = false;
        ShowSuccess = false;
    }
}
