@page "/manage-payees"
@layout MainLayout
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@inject IJSRuntime JS

@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.Text.Json



<div class="row">
    <SideNavSlider />

    <div class="col-lg-9">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">

                        <div class="row">
                            <div class="col-md-12">
                                <div class="ribbon-1">
                                    <div class="ribbon-box">
                                        <h3><div class="ribbon ribbon-mark bg-primary">Add a Payee</div></h3>

                                        <div class="row">
                                            <div class="col-md-12">
                                                @if (IsLoading)
                                                {
                                                    <div class="spinner-overlay">
                                                        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                                                            <span class="sr-only">Loading...</span>
                                                        </div>
                                                    </div>
                                                }

                                                <div class="row justify-content-end">
                                                    <div class="col-md-3"><button class="btn btn-primary px-4 float-right" @onclick="ShowAddModal">ADD</button></div>
                                                </div>
                                                <br/>

                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <table class="table mb-0" id="AddBillTable">
                                                            <thead>
                                                                <tr>
                                                                    <th>Payee Name</th>
                                                                    <th>Payee Type</th>
                                                                    <th>Account Number</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                @if (payeeList != null && payeeList.Any())
                                                                {
                                                                    @foreach (var item in payeeList)
                                                                    {
                                                                        <tr>
                                                                            <td>@item.PayeeName</td>
                                                                            <td>@item.PayeeTypeName</td>
                                                                            <td>@item.PayeeNumber</td>
                                                                        </tr>
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <tr>
                                                                        <td colspan="4" class="text-center text-muted">No payees found.</td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                                

                                                
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- MODAL -->
@if (ShowModal)
{
    <div class="modal show d-block" tabindex="-1" role="dialog" style="overflow-y: auto;">
        <div class="modal-dialog" role="document">
            <div class="modal-content form-horizontal">
                <div class="modal-header">
                    <h5 class="modal-title" id="editor-title">Add Payee</h5>
                    <button type="button" class="close" @onclick="CloseModal"><span>&times;</span></button>
                </div>
                <div class="modal-body">
                    <div class="col-sm-12 mb-3">
                        <label>Payee Name <small class="text-danger font-13">*</small></label>
                        <input type="text" class="form-control" @bind="newPayee.PayeeName" @oninput="(e) => ShowPayeeNameError = string.IsNullOrWhiteSpace(e.Value?.ToString())" />
                        @if (ShowPayeeNameError)
                        {
                            <div class="text-danger">Payee Name is required.</div>
                        }
                    </div>

                    <div class="col-sm-12 mb-3">
                        <label>Payee Type <small class="text-danger font-13">*</small></label>
                        <select class="form-control" @bind="PayeeTypeProxy" @bind:event="onchange">
                            <option value="">-- Select --</option>
                            @foreach (var category in payeeCategories)
                            {
                                <option value="@category.PayeeTypeId">@category.Name</option>
                            }
                        </select>
                        @if (ShowPayeeTypeError)
                        {
                            <div class="text-danger">Payee Type is required.</div>
                        }
                    </div>

                    <div class="col-sm-12 mb-3">
                        <label>Account Number <small class="text-danger font-13">*</small></label>
                        <input type="text" class="form-control" @bind="newPayee.PayeeNumber" @oninput="(e) => ShowPayeeNumberError = string.IsNullOrWhiteSpace(e.Value?.ToString())" />
                        @if (ShowPayeeNumberError)
                        {
                            <div class="text-danger">Account Number is required.</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="HandlePayeeSubmit">Save</button>
                    <button type="button" class="btn btn-danger" @onclick="CloseModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}



<!-- Toast -->
<div aria-live="polite" aria-atomic="true" style="position: fixed; top: 1rem; right: 1rem; z-index: 9999;">
    <div id="customToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-delay="3000" data-autohide="true">
        <div id="toastHeader" class="toast-header d-flex justify-content-between w-100">
            <strong id="toastTitle">Info</strong>
            <button type="button" class="close ms-auto" data-bs-dismiss="toast" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="toast-body" id="toastMessage">Placeholder</div>
        <div class="progress" style="height: 4px;">
            <div id="toastProgress" class="progress-bar" role="progressbar" style="width: 100%; transition: width 3s linear;"></div>
        </div>
    </div>
</div>


<!-- Scripts -->
<link href="/assets/css/jquery.dataTables.min.css" rel="stylesheet" type="text/css" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<script>

     window.initializeDataTable = () => {
        $(document).ready(function () {
            if ($.fn.dataTable.isDataTable('#AddBillTable')) {
                $('#AddBillTable').DataTable().destroy();
            }
            $('#AddBillTable').DataTable();
        });
    };

    window.showToast = (message, type = 'success') => {
        const header = $('#toastHeader');
        const title = $('#toastTitle');
        const progress = $('#toastProgress');

        header.removeClass('bg-success bg-danger text-white');
        progress.removeClass('bg-success bg-danger');

        if (type === 'success') {
            header.addClass('bg-success text-white');
            title.text('Success');
            // progress.addClass('bg-light');
        } else {
            header.addClass('bg-danger text-white');
            title.text('Error');
            // progress.addClass('bg-light');
        }

        $('#toastMessage').text(message);

        // Reset progress instantly and force reflow
        progress.css({ width: '100%', transition: 'none' });
        progress[0].offsetWidth; // ✅ Force browser reflow

        // Animate progress
        progress.css({ transition: 'width 3s linear', width: '0%' });

        // Show toast
        $('#customToast').toast('show');
    };

    function hideModal(modalId) {
        $('#' + modalId).modal('hide');
    }
    function showModal(modalId) {
        $('#' + modalId).modal('show');
    }
</script>

@code {
    private bool IsLoading = false;
    private string AuthToken;
    private bool ShowModal = false;

    public class PayeeCategory
    {
        public string Name { get; set; }
        public string PayeeTypeId { get; set; }
    }

    public class ApiResponse<T>
    {
        public string Status { get; set; }
        public T Data { get; set; }
        public string Message { get; set; }
        public int StatusCode { get; set; }
    }

    public class PayeeAddRequest
    {
        public string PayeeName { get; set; }
        public string PayeeNumber { get; set; }
        public string PayeeType { get; set; }
    }

    public class PayeeItem
    {
        public string Id { get; set; }
        public string PayeeName { get; set; }
        public string PayeeType { get; set; }
        public string PayeeNumber { get; set; }
        public string PayeeTypeName { get; set; }
    }

    public class BaseResponseModel<T>
    {
        public string Status { get; set; }
        public T Data { get; set; }
        public string Message { get; set; }
        public int StatusCode { get; set; }
    }

    private List<PayeeCategory> payeeCategories = new();
    private List<PayeeItem> payeeList = new();
    private PayeeAddRequest newPayee = new();

    private bool ShowPayeeNameError = false;
    private bool ShowPayeeTypeError = false;
    private bool ShowPayeeNumberError = false;

    private string PayeeTypeProxy
    {
        get => newPayee.PayeeType;
        set
        {
            newPayee.PayeeType = value;
            ShowPayeeTypeError = string.IsNullOrWhiteSpace(value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        AuthToken = await LocalStorage.GetItemAsync<string>("auth_token") ?? string.Empty;
        await LoadPayeeCategories();
        await LoadPayeeList();
    }

    private async Task LoadPayeeCategories()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();
            var request = new HttpRequestMessage(HttpMethod.Get, "https://acceinfoapi-cga0hmcdazb5hjbs.eastus2-01.azurewebsites.net/api/member/get-payeecategories");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthToken);
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var baseResponse = JsonSerializer.Deserialize<BaseResponseModel<List<PayeeCategory>>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (baseResponse?.Data != null)
                {
                    payeeCategories = baseResponse.Data;
                }

                IsLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            StateHasChanged();
            Console.WriteLine("Error loading categories: " + ex.Message);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadPayeeList()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            var request = new HttpRequestMessage(HttpMethod.Get, "https://acceinfoapi-cga0hmcdazb5hjbs.eastus2-01.azurewebsites.net/api/member/getpayeelist");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthToken);
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var baseResponse = JsonSerializer.Deserialize<BaseResponseModel<List<PayeeItem>>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (baseResponse?.Data != null)
                {
                    payeeList = baseResponse.Data;

                    IsLoading = false;
                    StateHasChanged();
                    await JS.InvokeVoidAsync("initializeDataTable");
                }
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            StateHasChanged();
            Console.WriteLine("Error loading payee list: " + ex.Message);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandlePayeeSubmit()
    {

        

        ShowPayeeNameError = string.IsNullOrWhiteSpace(newPayee.PayeeName);
        ShowPayeeTypeError = string.IsNullOrWhiteSpace(newPayee.PayeeType);
        ShowPayeeNumberError = string.IsNullOrWhiteSpace(newPayee.PayeeNumber);

        if (ShowPayeeNameError || ShowPayeeTypeError || ShowPayeeNumberError)
            return;


        IsLoading = true;
        StateHasChanged();

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Post, "https://acceinfoapi-cga0hmcdazb5hjbs.eastus2-01.azurewebsites.net/api/member/payee-add");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthToken);
            request.Content = JsonContent.Create(newPayee);

            var response = await Http.SendAsync(request);
            var responseContent = await response.Content.ReadAsStringAsync();

            var result = JsonSerializer.Deserialize<ApiResponse<object>>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            IsLoading = false;
            StateHasChanged();

            if (response.IsSuccessStatusCode && result != null && result.Status == "Success")
            {
                await JSRuntime.InvokeVoidAsync("showToast", result.Message ?? "Payee added successfully!", "success");

                newPayee = new PayeeAddRequest();
                await LoadPayeeList();
               // await JSRuntime.InvokeVoidAsync("hideModal", "editor-modal");
                CloseModal();
            }
            else
            {
                var errorMessage = result?.Message ?? "Failed to add payee.";
                await JSRuntime.InvokeVoidAsync("showToast", errorMessage, "error");
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("showToast", $"Unexpected error: {ex.Message}", "error");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }


    private void CloseModal()
    {
        ShowModal = false;
    }

    private void ShowAddModal() => ShowModal = true;
}
